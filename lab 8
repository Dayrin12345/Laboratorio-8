#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
// Variables globales
#define Led_1 LED1_Pin
#define Led_2 LED2_Pin
#define Led_3 LED3_Pin
#define Led_4 LED4_Pin
#define Modo BTM3_Pin
#define Mas BTM1_Pin
#define Menos BTM2_Pin
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
int modo(int);
void mostrarBinario(uint8_t numero);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void mostrarBinario(uint8_t numero) {
    HAL_GPIO_WritePin(GPIOA, Led_1, (numero & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOA, Led_2, (numero >> 1 & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOA, Led_3, (numero >> 2 & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOA, Led_4, (numero >> 3 & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}

// Función para determinar el modo
int modo(int x) {
    return (x == GPIO_PIN_RESET) ? 0 : 1;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
	uint8_t b1_state = 1;
	uint8_t last_b1_state = 1;
	uint8_t b2_state = 0;
	uint8_t last_b2_state = 0;
	uint8_t count = 1;
	uint8_t count2 = 4;
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();

  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  /* Lee el botón de modo. O es decena, 1 es binario*/
	      int m = modo(HAL_GPIO_ReadPin(BTM3_GPIO_Port, Modo));

	      /* Si está en modo decena*/
	      if (m == 0) {
	    	  /* Lee el botón más - incrementa la cuenta */
	          b1_state = HAL_GPIO_ReadPin(BTM1_GPIO_Port, Mas);
	          if (b1_state != last_b1_state) {
	              if (b1_state == GPIO_PIN_RESET) { // Botón presionado */
	            	  /* Mostrar el valor actual en los LEDs */
	            	  if (count2 == 1) {
	            	  			  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
	            	  			  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
	            	  			  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
	            	  			  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
	            	  			  count = count2+1;
	            	  		  }
	            	  		  if (count2 == 2) {
	            	  			  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
	            	  			  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
	            	  			  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
	            	  			  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
	            	  			  count = count2+1;
	            	  		  	}
	            	  		  if (count2 == 3) {
	            	  			  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
	            	  			  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
	            	  			  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
	            	  			  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
	            	  			  count = count2+1;
	            	  		  	}
	            	  		  if (count2 == 4) {
	            	  			  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
	            	  			  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
	            	  			  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
	            	  			  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
	            	  			  count = count2-4;
	            	  		  	}
	            	  		  /* Disminuir el contador y reiniciar a 4*/
	            	  		  if (count2 == 0) {
	            	  			  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
	            	  			  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
	            	  			  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
	            	  			  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
	            	  		      count2 = 4;
	            	  		      count = count2+1;
	            	  		   } else {
	            	  		      count2--;
	            	  		     }
	                  HAL_Delay(200); /* Esperar para evitar rebote */
	              }
	              last_b1_state = b1_state;
	          }

	          /* Botón menos - disminuye */
	          b2_state = HAL_GPIO_ReadPin(BTM2_GPIO_Port, Menos);
	          if (b2_state != last_b2_state) {
	              if (b2_state == GPIO_PIN_SET) { // Botón presionado
	                  if (count2 == 0) {
	                      HAL_GPIO_WritePin(GPIOA, LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin, GPIO_PIN_RESET);
	                      count2 = 4;
	                  } else {
	                      count2--;
	                  }
	                  mostrarBinario(count2);
	                  HAL_Delay(200); // Esperar para evitar rebote
	              }
	              last_b2_state = b2_state;
	          }
	      } else { // Modo binario
	          // Lee el botón más - incrementa la cuenta
	          b1_state = HAL_GPIO_ReadPin(BTM1_GPIO_Port, Mas);
	          if (b1_state != last_b1_state) {
	              if (b1_state == GPIO_PIN_RESET) {
	                  count = (count + 1) % 16; // Incrementa y vuelve a 0 después de 15
	                  mostrarBinario(count);
	                  HAL_Delay(200);
	              }
	              last_b1_state = b1_state;
	          }

	          // Botón menos - disminuye
	          b2_state = HAL_GPIO_ReadPin(BTM2_GPIO_Port, Menos);
	          if (b2_state != last_b2_state) {
	              if (b2_state == GPIO_PIN_SET) {
	                  count = (count - 1); // Decrementa y vuelve a 15 después de 0
	                  if (count==-1){
	                  }
	                  mostrarBinario(count);
	                  HAL_Delay(200);
	              }
	              last_b2_state = b2_state;
	          }
	      }

  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : BTM1_Pin */
  GPIO_InitStruct.Pin = BTM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BTM1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : BTM2_Pin */
  GPIO_InitStruct.Pin = BTM2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(BTM2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : BTM3_Pin */
  GPIO_InitStruct.Pin = BTM3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BTM3_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
